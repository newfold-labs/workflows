name: Build and Test Module Updates in Brand Plugin
on:
  workflow_call:
    inputs:
      php-version:
        description: The version of php to be used
        type: string
        default: '8.1'
      node-version:
        description: The version of node to be used
        type: string
        default: '20.x'
      plugin-repo:
        description: The plugin repo
        type: string
        required: true
      plugin-branch:
        description: The branch of the plugin to be tested
        type: string
        default: 'main'
      module-repo:
        description: The module repo
        type: string
        required: true
      module-branch:
        description: The branch of the module to be tested
        type: string
        required: true
      secondary-module-repo:
        description: An optional secondary module repo
        type: string
        required: false
        default: ''
      secondary-module-branch:
        description: The branch of the secondary module to be tested
        type: string
        required: false
        default: ''
      sync-npm-package:
        description: Flag to sync module files to equivalent node module
        type: boolean
        default: false
        required: false
      sync-npm-package-name:
        description: Package name to sync this module files into
        type: string
        default: ''
        required: false
      only-module-tests:
        description: Flag to run only this module tests
        type: boolean
        default: false
        required: false
      artifact-name:
        description: The name of the plugin artifact to upload.
        type: string
        default: ''
        required: false
  workflow_dispatch:
    inputs:
      php-version:
        description: The version of php to be used
        type: string
        default: '8.1'
      node-version:
        description: The version of node to be used
        type: string
        default: '20.x'
      plugin-repo:
        description: The plugin repo
        type: string
        required: true
      plugin-branch:
        description: The branch of the plugin to be tested
        type: string
        default: 'main'
      module-repo:
        description: The module repo
        type: string
        required: true
      module-branch:
        description: The branch of the module to be tested
        type: string
        required: true

jobs:
  job:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:

      - name: Setup PHP
        uses: shivammathur/setup-php@9e72090525849c5e82e596468b86eb55e9cc5401 # v2.32.0
        with:
          php-version: ${{ inputs.php-version }}
          coverage: none
          tools: composer, cs2pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout plugin
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ inputs.plugin-repo }}
          ref: ${{ inputs.plugin-branch }}

      - name: Set up Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache Composer vendor directory
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Show versions
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: Install PHP Dependencies for Plugin
        run: composer install --no-progress --no-dev --optimize-autoloader --prefer-dist

      - name: Setup Registry for Plugin
        run: printf "\n//npm.pkg.github.com/:_authToken=${{ secrets.NEWFOLD_ACCESS_TOKEN }}" >> .npmrc

      - name: NPM Install for Plugin
        run: npm ci --legacy-peer-deps

      - name: Get Module Source
        run: composer reinstall ${{ inputs.module-repo }} --prefer-source

      - name: Checkout Module Branch
        continue-on-error: true
        if: ${{ inputs.module-branch != 'main' }}
        working-directory: vendor/${{ inputs.module-repo }}
        run: git checkout --track origin/${{ inputs.module-branch }}

      - name: Get Secondary Module Source
        if: ${{ inputs.secondary-module-repo != '' }}
        run: composer reinstall ${{ inputs.secondary-module-repo }} --prefer-source

      - name: Checkout Secondary Module Branch
        if: ${{ (inputs.secondary-module-branch != '') && (inputs.secondary-module-repo != '') }}
        working-directory: vendor/${{ inputs.secondary-module-repo }}
        run: git checkout --track origin/${{ inputs.secondary-module-branch }}

      - name: Validate composer.json and composer.lock
        working-directory: vendor/${{ inputs.module-repo }}
        run: composer validate

      - name: Install Module PHP Dependencies
        working-directory: vendor/${{ inputs.module-repo }}
        run: composer install --no-progress --no-dev --optimize-autoloader --prefer-dist

      - name: Check Module for package file
        id: package
        shell: bash
        run: |
          if [[ -f vendor/${{ inputs.module-repo }}/package.json ]]
          then
            echo "Has package.json file"
            echo "hasPackageJson=true" >> "$GITHUB_OUTPUT"
          else
            echo "Does not have package.json file"
            echo "hasPackageJson=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Module for build script
        id: build
        shell: bash
        run: |
          if [[ -f vendor/${{ inputs.module-repo }}/package.json ]] && grep -wq '"build":' vendor/${{ inputs.module-repo }}/package.json;
          then
            echo "Has build command"
            echo "hasBuildCommand=true" >> "$GITHUB_OUTPUT"
          else
            echo "Does not have build command"
            echo "hasBuildCommand=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Registry for Module
        working-directory: vendor/${{ inputs.module-repo }}
        if: ${{ steps.package.outputs.hasPackageJson != 'false' }}
        run: printf "\n//npm.pkg.github.com/:_authToken=${{ secrets.NEWFOLD_ACCESS_TOKEN }}" >> .npmrc

      - name: NPM Install for Module if package.json exists
        working-directory: vendor/${{ inputs.module-repo }}
        if: ${{ steps.package.outputs.hasPackageJson != 'false' }}
        run: npm ci --legacy-peer-deps

      - name: Build Module if build command exists
        working-directory: vendor/${{ inputs.module-repo }}
        if: ${{ steps.build.outputs.hasBuildCommand != 'false' }}
        run: npm run build

      - name: Sync Module build files to Plugin node_modules dir
        if: ${{ (inputs.sync-npm-package) && (inputs.sync-npm-package-name != '') }}
        run: rsync -r -v -h "vendor/${{ inputs.module-repo }}/build/" "node_modules/@${{ inputs.sync-npm-package-name }}/build"

      - name: Build Plugin
        run: npm run build

      - name: Setup Workflow Context
        id: workflow
        working-directory: ${{ runner.temp }}
        env:
          REPO: ${{ inputs.plugin-repo }}
        run: |
          mkdir dist
          echo "DIST=${PWD}/dist" >> "$GITHUB_OUTPUT"
          echo "PACKAGE=${REPO##*/}" >> "$GITHUB_OUTPUT"

      - name: Prepare files
        run: rsync -r --include-from=.distinclude --exclude-from=.distignore . ${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}

      - name: List Files
        working-directory: ${{ steps.workflow.outputs.DIST }}
        run: find .

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: ${{ steps.workflow.outputs.DIST }}
          name: ${{ inputs.artifact-name != '' && inputs.artifact-name || steps.workflow.outputs.PACKAGE }}

      - name: Configure WordPress
        run: echo '{"plugins":["${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}"]}' > .wp-env.override.json

      - name: Install WordPress
        run: npx @wordpress/env@latest start --debug

      - name: Check for module tests
        id: check-for-module-tests
        run:
          if [[ $(find ./vendor/${{ inputs.module-repo }}/tests/cypress/integration -depth -name '*.cy.js') ]]; then MODULE_TESTS_FOUND=1; else MODULE_TESTS_FOUND=0; fi;
          if [[ $MODULE_TESTS_FOUND -eq 0 ]]; then echo "No module Cypress tests found"; else echo "Module tests found"; fi;
          echo "MODULE_TESTS_FOUND=$MODULE_TESTS_FOUND" >> "$GITHUB_OUTPUT";

      - name: Run Module Cypress Tests
        if: ${{ steps.check-for-module-tests.outputs.MODULE_TESTS_FOUND == 1 }}
        run: npm run test:e2e -- --browser chrome --spec "vendor/(${{ inputs.module-repo }}/tests/cypress/integration/*.cy.js),vendor/(${{ inputs.module-repo }}/tests/cypress/integration/**/*.cy.js)"

      - name: Run Remaining Cypress Tests
        if: ${{ ! inputs.only-module-tests }}
        run: npm run test:e2e -- --browser chrome --spec "tests/cypress/integration/**/*.cy.js,vendor/!(${{ inputs.module-repo }}/tests/cypress/integration/*.cy.js),vendor/!(${{ inputs.module-repo }}/tests/cypress/integration/**/*.cy.js)"

      - name: Store screenshots of test failures
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: ./tests/cypress/screenshots
          name: ${{ inputs.artifact-name != '' && inputs.artifact-name || steps.workflow.outputs.PACKAGE }}-screenshots

      - name: Output debug.log file contents
        if: always()
        continue-on-error: true
        run: npx wp-env run wordpress cat /var/www/html/wp-content/debug.log
