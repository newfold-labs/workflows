##
# This reusable workflow is used in modules to perp a release.
##
name: Reusable Module Prepare Release

on:
  workflow_call:
    inputs:
      module-repo:
        description: The module repo.
        type: string
        required: true
      module-branch:
        description: The branch of the module to use.
        type: string
        required: true
      level:
        description: The level of release to be used.
        type: string
        default: 'patch'
        required: true

# Disable permissions for all available scopes by default.
# Any needed permissions should be configured at the job level.
permissions: {}

jobs:
  # This job is used to prepare a release.
  #
  # It does the following:
  # - Bumps the version as specified in the input
  # - Prepares build artifacts
  # - Creates a release branch
  # - Commits the changes
  # - Creates a pull request to the main branch
  prep-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      # Give the default token permission to commit, push the changed files, and open a pull request.
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: ${{ inputs.module-repo }}
          ref: ${{ inputs.module-branch }}

      - name: Setup PHP
        uses: shivammathur/setup-php@cf4cade2721270509d5b1c766ab3549210a39a2a  # v2.33.0
        with:
          php-version: '8.1'
          coverage: none
          tools: composer, cs2pr

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020  # v4.4.0
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer vendor directory
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Show versions
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install PHP Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Install Packages
        run: npm install

      - name: Check for set-version-bump.js
        id: check_file
        run: |
          if [ -f .github/scripts/set-version-bump.js ]; then
            VERSION_SCRIPT_FOUND=1
            echo "Versioning script found"
          else
            echo "No versioning script found"
          fi
          echo "VERSION_SCRIPT_FOUND=$VERSION_SCRIPT_FOUND" >> $GITHUB_OUTPUT;

      - name: Run version script
        if: ${{ steps.check_file.outputs.VERSION_SCRIPT_FOUND == 1 }}
        id: run_version_script
        run: |
          TEMP_FILE="$RUNNER_TEMP/version_output.json"
          echo "Running version bump script..."
          node ./.github/scripts/set-version-bump.js ${{ inputs.level }} > "$TEMP_FILE"
          echo "output_file=$TEMP_FILE" >> $GITHUB_OUTPUT

      - name: Parse version script output
        if: ${{ steps.check_file.outputs.VERSION_SCRIPT_FOUND == 1 }}
        id: version_bump
        run: |
          FILE="${{ steps.run_version_script.outputs.output_file }}"
          echo "Parsing version output from: $FILE"
          echo "new_version=$(jq -r '.newVersion' "$FILE")" >> $GITHUB_OUTPUT
          echo "old_version=$(jq -r '.oldVersion' "$FILE")" >> $GITHUB_OUTPUT
          echo "message=$(jq -r '.message' "$FILE")" >> $GITHUB_OUTPUT

      - name: Run Build and Update Language Files
        if: ${{ steps.check_file.outputs.VERSION_SCRIPT_FOUND == 1 }}
        run: npm run post-set-version

      # create the release branch, commit the changes, and create pull request
      - name: Create Release Pull Request
        if: steps.check_file.outputs.VERSION_SCRIPT_FOUND == 1
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e  # v7.0.8
        with:
          token: ${{ github.token }}
          base: ${{ inputs.module-branch }}
          branch: release/${{ steps.version_bump.outputs.new_version }}
          title: "Automated ${{ inputs.level }} Release ${{ steps.version_bump.outputs.new_version }} PR"
          body: "This PR was created automatically by a GitHub Action."
          commit-message: "ðŸ¤– prep release - ${{ steps.version_bump.outputs.message }}"
